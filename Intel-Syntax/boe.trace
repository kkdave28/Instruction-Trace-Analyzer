1: endbr64
2: push rbp  Operand Values: rbp = 0x0, Constant = 0x0
3: mov  rbp,rsp  Operand Values: rbp = 0x7fffffffdb20, Constant = 0x7fffffffdb20  Operand Values: rsp = 0x7fffffffdb20, Constant = 0x7fffffffdb20
4: sub  rsp,0x30  Operand Values: rsp = 0x7fffffffdaf0, Constant = 0x7fffffffdaf0  Operand Values: Constant = 0x30
5: mov  DWORD PTR [rbp-0x24],edi  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdafc  Operand Values: edi = 0x1, Constant = 0x1
6: mov  QWORD PTR [rbp-0x30],rsi  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdaf0  Operand Values: rsi = 0x7fffffffdc18, Constant = 0x7fffffffdc18
7: mov  rax,QWORD PTR fs:0x28  Operand Values: rax = 0x44edcea4f4bdc500, Constant = 0x44edcea4f4bdc500  Operand Values: fs = 0x0, 
8: mov  QWORD PTR [rbp-0x8],rax  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb18  Operand Values: rax = 0x44edcea4f4bdc500, Constant = 0x44edcea4f4bdc500
9: xor  eax,eax  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
10: mov  BYTE PTR [rbp-0x10],0x78  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb10  Operand Values: Constant = 0x78
11: mov  BYTE PTR [rbp-0xf],0x78  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb11  Operand Values: Constant = 0x78
12: mov  BYTE PTR [rbp-0xe],0x78  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb12  Operand Values: Constant = 0x78
13: lea  rax,[rbp-0x18]  Operand Values: rax = 0x7fffffffdb08, Constant = 0x7fffffffdb08  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb08
14: add  rax,0x7  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f  Operand Values: Constant = 0x7
15: mov  rdi,rax  Operand Values: rdi = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f
16: call 0x55555555518a  Operand Values: Constant = 0x55555555518a
17: endbr64
18: push rbp  Operand Values: rbp = 0x7fffffffdb20, Constant = 0x7fffffffdb20
19: mov  rbp,rsp  Operand Values: rbp = 0x7fffffffdae0, Constant = 0x7fffffffdae0  Operand Values: rsp = 0x7fffffffdae0, Constant = 0x7fffffffdae0
20: sub  rsp,0x8  Operand Values: rsp = 0x7fffffffdad8, Constant = 0x7fffffffdad8  Operand Values: Constant = 0x8
21: mov  QWORD PTR [rbp-0x8],rdi  Operand Values: rbp = 0x7fffffffdae0,  *STORE*  Effective Address = 0x7fffffffdad8  Operand Values: rdi = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f
22: mov  rax,QWORD PTR [rbp-0x8]  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f  Operand Values: rbp = 0x7fffffffdae0,  *LOAD*  Effective Address = 0x7fffffffdad8
23: mov  rdi,rax  Operand Values: rdi = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f
24: call 0x555555555169  Operand Values: Constant = 0x555555555169
25: endbr64
26: push rbp  Operand Values: rbp = 0x7fffffffdae0, Constant = 0x7fffffffdae0
27: mov  rbp,rsp  Operand Values: rbp = 0x7fffffffdac8, Constant = 0x7fffffffdac8  Operand Values: rsp = 0x7fffffffdac8, Constant = 0x7fffffffdac8
28: mov  QWORD PTR [rbp-0x18],rdi  Operand Values: rbp = 0x7fffffffdac8,  *STORE*  Effective Address = 0x7fffffffdab0  Operand Values: rdi = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f
29: mov  rax,QWORD PTR [rbp-0x18]  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f  Operand Values: rbp = 0x7fffffffdac8,  *LOAD*  Effective Address = 0x7fffffffdab0
30: mov  QWORD PTR [rbp-0x8],rax  Operand Values: rbp = 0x7fffffffdac8,  *STORE*  Effective Address = 0x7fffffffdac0  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f
31: mov  rax,QWORD PTR [rbp-0x8]  Operand Values: rax = 0x7fffffffdb0f, Constant = 0x7fffffffdb0f  Operand Values: rbp = 0x7fffffffdac8,  *LOAD*  Effective Address = 0x7fffffffdac0
32: mov  DWORD PTR [rax],0x0  Operand Values: rax = 0x7fffffffdb0f,  *STORE*  Effective Address = 0x7fffffffdb0f  Operand Values: Constant = 0x0
33: nop
34: pop  rbp  Operand Values: rbp = 0x7fffffffdae0, Constant = 0x7fffffffdae0
35: ret
36: nop
37: leave
38: ret
39: mov  DWORD PTR [rbp-0x20],0x0  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x0
40: jmp  0x555555555202  Operand Values: Constant = 0x555555555202
41: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
42: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
43: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
44: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
45: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
46: call 0x555555555060  Operand Values: Constant = 0x555555555060
47: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
48: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
49: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
50: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
51: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
52: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
53: call 0x555555555060  Operand Values: Constant = 0x555555555060
54: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
55: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
56: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
57: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
58: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
59: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
60: call 0x555555555060  Operand Values: Constant = 0x555555555060
61: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
62: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
63: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
64: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
65: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
66: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
67: call 0x555555555060  Operand Values: Constant = 0x555555555060
68: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
69: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
70: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
71: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
72: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
73: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
74: call 0x555555555060  Operand Values: Constant = 0x555555555060
75: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
76: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
77: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
78: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
79: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
80: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
81: call 0x555555555060  Operand Values: Constant = 0x555555555060
82: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
83: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
84: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
85: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
86: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
87: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
88: call 0x555555555060  Operand Values: Constant = 0x555555555060
89: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
90: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
91: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
92: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
93: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
94: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
95: call 0x555555555060  Operand Values: Constant = 0x555555555060
96: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
97: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
98: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
99: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
100: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
101: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
102: call 0x555555555060  Operand Values: Constant = 0x555555555060
103: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
104: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
105: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
106: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
107: movsx  eax,al  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
108: mov  edi,eax  Operand Values: edi = 0x0, Constant = 0x0  Operand Values: eax = 0x0, Constant = 0x0
109: call 0x555555555060  Operand Values: Constant = 0x555555555060
110: add  DWORD PTR [rbp-0x20],0x1  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x1
111: cmp  DWORD PTR [rbp-0x20],0x9  Operand Values: rbp = 0x7fffffffdb20,  *STORE*  Effective Address = 0x7fffffffdb00  Operand Values: Constant = 0x9
112: jle  0x5555555551f0  Operand Values: Constant = 0x5555555551f0
113: movzx  eax,BYTE PTR [rbp-0x10]  Operand Values: eax = 0x0, Constant = 0x0  Operand Values: rbp = 0x7fffffffdb20,  *LOAD*  Effective Address = 0x7fffffffdb10
114: movsx  ecx,al  Operand Values: ecx = 0x0, Constant = 0x0  Operand Values: al = 0x0, Constant = 0x0
115: mov  eax,0x7b  Operand Values: eax = 0x7b, Constant = 0x7b  Operand Values: Constant = 0x7b
116: cdq
117: idiv ecx  Operand Values: ecx = 0x0, Constant = 0x0
 
**CRASHING INSTRUCTION** 117: idiv ecx
Possible corrupting instruction found: 32: mov DWORD PTR [rax] ,0x0
Possible corrupting instruction found: 10: mov BYTE PTR [rbp-0x10] ,0x78